// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---
model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  name          String
  role          UserRole
  status        String?      @default("ACTIVE")
  dashboardCode String?      @unique
  lastActive    DateTime?    @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  organization  Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  university    University?   @relation(fields: [universityId], references: [id])
  universityId  String?
  student       Student?
  studentProfile StudentProfile?
  jobs          Job[]        @relation("PostedJobs")
  applications  Application[]
  posts         Post[]       @relation("UserPosts")
  
  // New verification fields
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  adminRole          AdminRole?
  
  // Relations for verification system
  verificationDocuments VerificationDocument[]
  organizationMemberships OrganizationMember[] @relation("UserMemberships")
  invitedMembers OrganizationMember[] @relation("InvitedBy")
}

enum UserRole {
  ADMIN
  EMPLOYER
  STUDENT
  UNIVERSITY
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  NOT_REQUIRED
}

enum AdminRole {
  SUPER_ADMIN
  MODERATOR
}

model Organization {
  id          String     @id @default(uuid())
  name        String
  industry    String?
  users       User[]
  jobs        Job[]
  createdAt   DateTime   @default(now())
  
  // New verification fields
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  registrationNumber String?
  website            String?
  
  // Relations for multi-user system
  members     OrganizationMember[]
  invites     OrganizationInvite[]
}

model Job {
  id             String       @id @default(uuid())
  title          String
  description    String
  status         String?      @default("OPEN")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  postedBy       User         @relation("PostedJobs", fields: [postedById], references: [id])
  postedById     String
  employer       Employer?    @relation(fields: [employerId], references: [id])
  employerId     String?
  applications   Application[]
  createdAt      DateTime     @default(now())
}

model Application {
  id             String             @id @default(uuid())
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  job            Job                @relation(fields: [jobId], references: [id])
  jobId          String
  /**
   * Absolute path of the uploaded résumé file on the server.
   * Stored so employers can download the original document at any time.
   */
  resumePath     String
  /**
   * Cover-letter text submitted by the student. 4 kB limit enforced at the API layer.
   */
  coverLetter    String
  /**
   * Any additional information the student chose to provide (optional).
   */
  additionalInfo String?
  status         ApplicationStatus  @default(PENDING)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW
  ACCEPTED
  REJECTED
}

model Post {
  id         String     @id @default(uuid())
  title      String
  excerpt    String
  content    String     @db.Text
  image      String
  category   String
  authorName String
  readTime   String
  featured   Boolean    @default(false)
  status     PostStatus @default(DRAFT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation("UserPosts", fields: [authorId], references: [id])
  authorId   String
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

// --- University Models ---
model University {
  id          String      @id @default(uuid())
  name        String
  nameEn      String
  location    String?
  type        String      // 'public' or 'private'
  city        String
  emailDomains String[]   // Array of allowed email domains
  website     String?
  established Int?
  isActive    Boolean     @default(true)
  users       User[]
  degrees     Degree[]
  education   Education[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Degree {
  id                String      @id @default(uuid())
  name              String
  field             String?
  university        University   @relation(fields: [universityId], references: [id])
  universityId      String
  education         Education[]
  prevPlacementRate Float?      // Previous period placement rate for trend calculation
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Student {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  placed      Boolean     @default(false)
  salary      Float?
  employer    Employer?   @relation(fields: [employerId], references: [id])
  employerId  String?
  education   Education[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Detailed student profile for comprehensive information
model StudentProfile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  firstName      String
  lastName       String
  phone          String?
  bio            String?
  studyField     String
  studyLevel     String
  graduationYear Int
  skills         String[] // Array of skills
  locationId     String?  // Greek location ID
  locationName   String?  // Cached location name for performance
  address        String?  // Full street address
  resumeUrl      String?  // Cloudinary URL for resume
  resumeFileName String?  // Original filename
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([studyField])
  @@index([studyLevel])
  @@index([locationId])
}

model Education {
  id            String      @id @default(uuid())
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     String
  university    University  @relation(fields: [universityId], references: [id])
  universityId  String
  degree        Degree      @relation(fields: [degreeId], references: [id])
  degreeId      String
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Employer {
  id          String      @id @default(uuid())
  name        String
  industry    String?
  students    Student[]   // Students hired by this employer
  jobs        Job[]       // Jobs offered by this employer
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// --- End University Models ---

// --- Verification Models ---
model VerificationDocument {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  type          String   // 'student_id', 'business_license', 'accreditation', etc.
  fileUrl       String
  fileName      String
  fileSize      Int
  mimeType      String
  status        DocumentStatus @default(PENDING)
  reviewNotes   String?
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, status])
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

model OrganizationMember {
  id            String   @id @default(uuid())
  user          User     @relation("UserMemberships", fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  invitedBy     User?    @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById   String?
  invitedAt     DateTime @default(now())
  acceptedAt    DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, organizationId])
  @@index([organizationId, isActive])
}

model OrganizationInvite {
  id            String   @id @default(uuid())
  email         String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  token         String   @unique
  invitedBy     String
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime @default(now())
  
  @@index([token])
  @@index([organizationId, email])
}
